{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to aws-mini-book AWS cloud concepts studies guide. The repository was created to centralize informations and notes about the principal components of the AWS Cloud Provider. The objective this project is provides a solid base to prepare students for AWS certificates exams. The repository is an open initiative, collaborate with your PR Topics 01. Cloud Concepts Basic cloud concepts, advantages and disadvantages and Cloud Models. 02. Accounts Organization AWS Organizations best pratices, root account, master account. 03. Well Architected Framework AWS Well Architected Framework. 04. Security, Identity & Compliance IAM and Roles. Extra - AWS Awesome CLI tools, Projects Extra - Contributors aws-mini-book Contributors","title":"aws-mini-book"},{"location":"#welcome-to-aws-mini-book","text":"AWS cloud concepts studies guide. The repository was created to centralize informations and notes about the principal components of the AWS Cloud Provider. The objective this project is provides a solid base to prepare students for AWS certificates exams. The repository is an open initiative, collaborate with your PR Topics 01. Cloud Concepts Basic cloud concepts, advantages and disadvantages and Cloud Models. 02. Accounts Organization AWS Organizations best pratices, root account, master account. 03. Well Architected Framework AWS Well Architected Framework. 04. Security, Identity & Compliance IAM and Roles. Extra - AWS Awesome CLI tools, Projects Extra - Contributors aws-mini-book Contributors","title":"Welcome to aws-mini-book"},{"location":"01-cloud-concepts/","text":"This section will be explained the Cloud Computing Definition, Advantages and Disadvantages, Cloud models, and Deployment models. Cloud Computing, Advantages and Disadvantages One good definition of Cloud is the AWS Cloud definition: Cloud computing is the on-demand delivery of IT resources over the Internet with pay-as-you-go pricing. The definition may be confused for beginner Cloud students. To better understand the definition above, it is necessary to understand how association the following characteristics: Maintenance Concern less about Energy, Hardware mount process Business > TI technologies Reliability specialty in determining tools high disponibilty possibility Security Specific Security Tools Software and Hardware Security Solutions Performance Hardware components as service If needs performance, exist possibilities Scalability: Scalability on demand Minimal IT Resources requirements to run applications Cost and Elasticity Manage Costs There is a Soft and Hard, but there are possibilities. The natural workflows used by Development teams focus on the Agility of the contributions. Agility was not the main characteristic focused of the Operations/Infrastructure teams. The Stable characteristic was more important for Operations teams, a lot because of the Hardware interaction. With introduce and evolution of the technologies like Virtualization, the Infrastructure manual tasks become unnecessary and Infrastructure components started to be delivered as a service for Cloud Providers like AWS, Google, Microsoft, and others. Now, as well Development team, Agility became an accessible and interesting point to the Operations team's delivery results at the same speed as the development teams. The Maintenance of the infrastructure delivered as a service by Cloud Providers, bring the advantages like the unnecessary concern less like electric energy, hardware health status and etc, which it is important to focus a Business Purposes and not infrastructure requirements. When using Cloud Services, the Reliability rises as we outsource the labor of maintaining the components to a team focused on delivering a better solution in a specific way. Security is a component the reliability applies, it has a lot of services created in a specific way for help in infrastructures contexts and business cases. Hardware security should be cited because avoid concerns like natural disasters and other physical problems. One of the more important keywords of the Cloud is possibilities , the possibilities of the get high Computing Performance components when it needs and Scale components on demand and pay only time used are possibilities which can reduces costs if your application or infrastructure fits and is scalable infra, and you pay only necessary to application run, on-demand requests. The Cloud Computing is not the definitive better solution for all IT infrastructure cases. The Cloud Computing is more one option to deploy your infrastructure or application. Before the adopted Cloud in your infrastructure, it is necessary answer the self question \"Why problem I need to resolve?\" . If your application fits in Cloud characteristics mentioned above, maybe it is the better choose for your problems. Main Cloud Models The main Cloud Models are: IaaS ( Infrastructure as a Service ): Infrastructure components delivered as a service, for example, Virtual Machines, Networks, Firewalls etc. Examples: AWS VPC, AWS EC2, AWS S3. PaaS ( Plataform as a Service ): Services to run applications over infrastructure abstraction. For example, Run a web app, and delivered static files. Examples: Heroku, AWS Elastic Beanstalk, OpenShift etc. FaaS ( Function as a Service ): Function as a Service, granular services to simplify recurring tasks. For example: send email, send webhook, rsync data base. Examples: AWS Data Sync, AWS Lambda. Main Deployment Models The main Deployment Models are: Private Cloud : \"Bared Metal Cloud\" , Owner cloud, the resources is not shared with other corporates. Should be created for example, with OpenStack, VMWare, XenServer. Public Cloud : The Cloud shares resources Anyone can use. AWS, GCP, Oracle Cloud. You can be contract one the enterprise AWS, Google Cloud Platform, Microsoft Azure, Alibaba Cloud. Hybrid Cloud : Cloud composed of parts Private Cloud and Public Cloud . Multicloud : Cloud architecture is non-dependent on the specific Cloud model. Run as the same way in Private Cloud , Public Cloud . Community : Custom Cloud architecture is created by corporations foe to provide the clients, the flexibility of the more one Cloud Public and Private Cloud features. References AWS - Cloud Computing Definition https://aws.amazon.com/what-is-cloud-computing/?nc1=h_ls NIST - Cloud Computing Definition https://csrc.nist.gov/publications/detail/sp/800-145/final","title":"01. Cloud Concepts"},{"location":"01-cloud-concepts/#cloud-computing-advantages-and-disadvantages","text":"One good definition of Cloud is the AWS Cloud definition: Cloud computing is the on-demand delivery of IT resources over the Internet with pay-as-you-go pricing. The definition may be confused for beginner Cloud students. To better understand the definition above, it is necessary to understand how association the following characteristics: Maintenance Concern less about Energy, Hardware mount process Business > TI technologies Reliability specialty in determining tools high disponibilty possibility Security Specific Security Tools Software and Hardware Security Solutions Performance Hardware components as service If needs performance, exist possibilities Scalability: Scalability on demand Minimal IT Resources requirements to run applications Cost and Elasticity Manage Costs There is a Soft and Hard, but there are possibilities. The natural workflows used by Development teams focus on the Agility of the contributions. Agility was not the main characteristic focused of the Operations/Infrastructure teams. The Stable characteristic was more important for Operations teams, a lot because of the Hardware interaction. With introduce and evolution of the technologies like Virtualization, the Infrastructure manual tasks become unnecessary and Infrastructure components started to be delivered as a service for Cloud Providers like AWS, Google, Microsoft, and others. Now, as well Development team, Agility became an accessible and interesting point to the Operations team's delivery results at the same speed as the development teams. The Maintenance of the infrastructure delivered as a service by Cloud Providers, bring the advantages like the unnecessary concern less like electric energy, hardware health status and etc, which it is important to focus a Business Purposes and not infrastructure requirements. When using Cloud Services, the Reliability rises as we outsource the labor of maintaining the components to a team focused on delivering a better solution in a specific way. Security is a component the reliability applies, it has a lot of services created in a specific way for help in infrastructures contexts and business cases. Hardware security should be cited because avoid concerns like natural disasters and other physical problems. One of the more important keywords of the Cloud is possibilities , the possibilities of the get high Computing Performance components when it needs and Scale components on demand and pay only time used are possibilities which can reduces costs if your application or infrastructure fits and is scalable infra, and you pay only necessary to application run, on-demand requests. The Cloud Computing is not the definitive better solution for all IT infrastructure cases. The Cloud Computing is more one option to deploy your infrastructure or application. Before the adopted Cloud in your infrastructure, it is necessary answer the self question \"Why problem I need to resolve?\" . If your application fits in Cloud characteristics mentioned above, maybe it is the better choose for your problems.","title":"Cloud Computing, Advantages and Disadvantages"},{"location":"01-cloud-concepts/#main-cloud-models","text":"The main Cloud Models are: IaaS ( Infrastructure as a Service ): Infrastructure components delivered as a service, for example, Virtual Machines, Networks, Firewalls etc. Examples: AWS VPC, AWS EC2, AWS S3. PaaS ( Plataform as a Service ): Services to run applications over infrastructure abstraction. For example, Run a web app, and delivered static files. Examples: Heroku, AWS Elastic Beanstalk, OpenShift etc. FaaS ( Function as a Service ): Function as a Service, granular services to simplify recurring tasks. For example: send email, send webhook, rsync data base. Examples: AWS Data Sync, AWS Lambda.","title":"Main Cloud Models"},{"location":"01-cloud-concepts/#main-deployment-models","text":"The main Deployment Models are: Private Cloud : \"Bared Metal Cloud\" , Owner cloud, the resources is not shared with other corporates. Should be created for example, with OpenStack, VMWare, XenServer. Public Cloud : The Cloud shares resources Anyone can use. AWS, GCP, Oracle Cloud. You can be contract one the enterprise AWS, Google Cloud Platform, Microsoft Azure, Alibaba Cloud. Hybrid Cloud : Cloud composed of parts Private Cloud and Public Cloud . Multicloud : Cloud architecture is non-dependent on the specific Cloud model. Run as the same way in Private Cloud , Public Cloud . Community : Custom Cloud architecture is created by corporations foe to provide the clients, the flexibility of the more one Cloud Public and Private Cloud features.","title":"Main Deployment Models"},{"location":"01-cloud-concepts/#references","text":"AWS - Cloud Computing Definition https://aws.amazon.com/what-is-cloud-computing/?nc1=h_ls NIST - Cloud Computing Definition https://csrc.nist.gov/publications/detail/sp/800-145/final","title":"References"},{"location":"02-accounts-organization/","text":"This section is about: Accounts Foundation; AWS Accounts; AWS Organization; SCP - Security Control Policy; Support Center Plans. Foundations These important point about Accounts Foundation: Important on init Cloud Project; One account is not better way to utilize AWS Account; Does not exist Wrong, the wrong is not has strategy; AWS Account is cost less. Hierarchical account strategy to better Organization and Security . This account strategy, the sub accounts is to organizate domain sections, centralize billing and restrict resource create permission based sub-account. Master Account : Composed by only one AWS Account. In this account, only Root Account it used. This account is the first account created and is is to create or associate other sub-accounts. This account function is to unify sub-accounts billing only, no new Resources should be created. Root Account is the user who owns an AWS Account. Oraganisation Unit - OU : Visually organize AWS Accounts and service security rules. Normally, it was created to Domain Departaments. To indetify Domain Departaments, a one way is understood characteristic about the resources presents it. If Type, Lifecycle and, Permissions are differents, maybe it's a Department. Accounts : Account when will be create resources and deployments. Each account has identity that associate resources created in it. The users should be created in this account. Resources : AWS services and resources, for example: EC2, S3, EKS, EFS etc. Dont be confused Master Account with Root Account. Master Account is the first account created on AWS and Root Account is the user who owns an AWS Account. AWS Organization is important to create Consolidated Billing feature. This feature is to centralize billing of the sub-accounts. There are two ways to create sub-account. In AWS Organization , you can be create newer AWS account, or invite AWS existing account. Both ways are made given email. To accepted invite from AWS existing account, in console of the Existing Account, it should be access AWS Organization menu, and click accept invite option, the accept is not be done by email. The create resource restriction can be SCP - Security Control Policies that provides options to restrict resources creation to OU or Accounts. Account Security Pratices Active MFA for all account, specially Root Account. For create new accounts, it is necessary one unique email. The best pratice is create email group for the team and not used person emails. Add Alternate Contacts in Root Account. It is important to receive security contacts from AWS Support. Accounts Support Center Plans There is differents AWS Support Plans levels: Basic (free): Recommended if you are experimenting or testing in AWS; Developer : Minimum recommended tier if you have production workloads in AWS; Business Recommended if you have production and/or business critical workloads in AWS; Enterprise : Recommended if you have business and/or mission critical workloads in AWS. References AWS Account https://aws.amazon.com/account/ AWS Organizations https://aws.amazon.com/organizations/ AWS Support Center Plans https://aws.amazon.com/pt/premiumsupport/plans/ AWS Landing Zone https://aws.amazon.com/solutions/aws-landing-zone/ AWS Billing https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilling-procedure.html AWS SCP - Service Control Policies Reference: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html Example: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_example-scps.html","title":"02. Accounts Organization"},{"location":"02-accounts-organization/#foundations","text":"These important point about Accounts Foundation: Important on init Cloud Project; One account is not better way to utilize AWS Account; Does not exist Wrong, the wrong is not has strategy; AWS Account is cost less. Hierarchical account strategy to better Organization and Security . This account strategy, the sub accounts is to organizate domain sections, centralize billing and restrict resource create permission based sub-account. Master Account : Composed by only one AWS Account. In this account, only Root Account it used. This account is the first account created and is is to create or associate other sub-accounts. This account function is to unify sub-accounts billing only, no new Resources should be created. Root Account is the user who owns an AWS Account. Oraganisation Unit - OU : Visually organize AWS Accounts and service security rules. Normally, it was created to Domain Departaments. To indetify Domain Departaments, a one way is understood characteristic about the resources presents it. If Type, Lifecycle and, Permissions are differents, maybe it's a Department. Accounts : Account when will be create resources and deployments. Each account has identity that associate resources created in it. The users should be created in this account. Resources : AWS services and resources, for example: EC2, S3, EKS, EFS etc. Dont be confused Master Account with Root Account. Master Account is the first account created on AWS and Root Account is the user who owns an AWS Account. AWS Organization is important to create Consolidated Billing feature. This feature is to centralize billing of the sub-accounts. There are two ways to create sub-account. In AWS Organization , you can be create newer AWS account, or invite AWS existing account. Both ways are made given email. To accepted invite from AWS existing account, in console of the Existing Account, it should be access AWS Organization menu, and click accept invite option, the accept is not be done by email. The create resource restriction can be SCP - Security Control Policies that provides options to restrict resources creation to OU or Accounts.","title":"Foundations"},{"location":"02-accounts-organization/#account-security-pratices","text":"Active MFA for all account, specially Root Account. For create new accounts, it is necessary one unique email. The best pratice is create email group for the team and not used person emails. Add Alternate Contacts in Root Account. It is important to receive security contacts from AWS Support.","title":"Account Security Pratices"},{"location":"02-accounts-organization/#accounts-support-center-plans","text":"There is differents AWS Support Plans levels: Basic (free): Recommended if you are experimenting or testing in AWS; Developer : Minimum recommended tier if you have production workloads in AWS; Business Recommended if you have production and/or business critical workloads in AWS; Enterprise : Recommended if you have business and/or mission critical workloads in AWS.","title":"Accounts Support Center Plans"},{"location":"02-accounts-organization/#references","text":"AWS Account https://aws.amazon.com/account/ AWS Organizations https://aws.amazon.com/organizations/ AWS Support Center Plans https://aws.amazon.com/pt/premiumsupport/plans/ AWS Landing Zone https://aws.amazon.com/solutions/aws-landing-zone/ AWS Billing https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/useconsolidatedbilling-procedure.html AWS SCP - Service Control Policies Reference: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html Example: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_example-scps.html","title":"References"},{"location":"03-well-architected-framework/","text":"The AWS Well-Architected is AWS service to review the state architectural best practices and guidance. The review is made through answer form; It is free; TODO: Describe workflow TODO: Describe Pilar References AWS Well-Architected Tool https://aws.amazon.com/well-architected-tool/ AWS Well-Architected Doc https://aws.amazon.com/architecture/well-architected/ The 5 Pillars of the AWS Well-Architected Framework https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/","title":"03. Well Architected Framework"},{"location":"03-well-architected-framework/#references","text":"AWS Well-Architected Tool https://aws.amazon.com/well-architected-tool/ AWS Well-Architected Doc https://aws.amazon.com/architecture/well-architected/ The 5 Pillars of the AWS Well-Architected Framework https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/","title":"References"},{"location":"04-security-identity-compliance/","text":"IAM is a AWS service to management users access and permission; As well Organization SCP, IAM define the users permissions and actions conditions in AWS account; Root Account or Master Account is not a IAM user; IAM users are to employers accounts and integration service accounts; It is possible to create polices to allow users access Organization through other organizations; It is good pratice to create one account only by Indentity purposes, from it, go to specifics accounts defined by policies (Switch Role); For operation purposes, dont use Root Account and Master Account, these accounts is most powerfull roles; It is suggested store Root Account and Master Account password with Dual-custody Authentication, break password and give to differents teams responsible; The account is create with numerical random ID number. The IAM service it is possible create an alias to URL organization account console, to delivery to employers IAM users; The IAM service it is possible create Group and Users. There is Policies for Groups and Users; Custom policies can be made; To easy the permissions downgrading, It is a goog pratice have attached ReadOnlyAccess and FullAccess Group or User police; Explicit in username if user is a service integration user, It is used svc-* prefix normally; There is two options to AWS access type: Programatic Access (login with Token, for dev-tools, CLI, SDK); and AWS Management Console Access (for Employers); It is possible set permission to User with following permission: Group, Copy permission from existing user, and Attach existing policies directly. The User can have permissions defined with one more type. User Tag assist in filters; Role is a mecanism to allow resources AWS to communicate with other AWS services; References AWS IAM Best Practices https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html Access keys best practices https://medium.com/@ashishrajan/aws-security-best-practices-access-keys-cloudsecurity-facb20aa0db6","title":"04. Security, Identity & Compliance"},{"location":"04-security-identity-compliance/#references","text":"AWS IAM Best Practices https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html Access keys best practices https://medium.com/@ashishrajan/aws-security-best-practices-access-keys-cloudsecurity-facb20aa0db6","title":"References"},{"location":"extra-aws-awesome/","text":"CLI Tools AWS Vault: Tool to securely store and access AWS credentials in a development environment https://github.com/99designs/aws-vault Local Stack: A fully functional local cloud stack. Develop and test your cloud and serverless apps offline! https://localstack.cloud/ aws-shell: The interactive productivity booster for the AWS CLI: https://github.com/awslabs/aws-shell","title":"Extra - AWS Awesome"},{"location":"extra-aws-awesome/#cli-tools","text":"AWS Vault: Tool to securely store and access AWS credentials in a development environment https://github.com/99designs/aws-vault Local Stack: A fully functional local cloud stack. Develop and test your cloud and serverless apps offline! https://localstack.cloud/ aws-shell: The interactive productivity booster for the AWS CLI: https://github.com/awslabs/aws-shell","title":"CLI Tools"},{"location":"extra-contributors/","text":"Contributors Carlos Neto https://github.com/augustoliks/ https://www.linkedin.com/in/c-neto/ carlos.neto.dev@gmail.com","title":"Extra - Page Contributors"},{"location":"extra-contributors/#contributors","text":"Carlos Neto https://github.com/augustoliks/ https://www.linkedin.com/in/c-neto/ carlos.neto.dev@gmail.com","title":"Contributors"}]}